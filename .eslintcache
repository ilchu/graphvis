[{"/home/ilia/js/kosac/graphvis/src/reportWebVitals.js":"1","/home/ilia/js/kosac/graphvis/src/App.js":"2","/home/ilia/js/kosac/graphvis/src/index.js":"3","/home/ilia/js/kosac/graphvis/src/client.js":"4","/home/ilia/js/kosac/graphvis/src/Graph.js":"5","/home/ilia/js/kosac/graphvis/src/QueryForm.js":"6","/home/ilia/js/kosac/graphvis/src/SplitPane.js":"7","/home/ilia/js/kosac/graphvis/src/LoadDataAndGraph.js":"8"},{"size":362,"mtime":1608775285262,"results":"9","hashOfConfig":"10"},{"size":526,"mtime":1609378417662,"results":"11","hashOfConfig":"10"},{"size":457,"mtime":1609218584112,"results":"12","hashOfConfig":"13"},{"size":907,"mtime":1609999259153,"results":"14","hashOfConfig":"10"},{"size":7305,"mtime":1610683298886,"results":"15","hashOfConfig":"10"},{"size":654,"mtime":1610096838902,"results":"16","hashOfConfig":"10"},{"size":273,"mtime":1609401672646,"results":"17","hashOfConfig":"10"},{"size":4522,"mtime":1610604415376,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"8b7yw7",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y87eqe",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},"/home/ilia/js/kosac/graphvis/src/reportWebVitals.js",[],["39","40"],"/home/ilia/js/kosac/graphvis/src/App.js",[],["41","42"],"/home/ilia/js/kosac/graphvis/src/index.js",[],"/home/ilia/js/kosac/graphvis/src/client.js",[],"/home/ilia/js/kosac/graphvis/src/Graph.js",["43","44","45"],"/home/ilia/js/kosac/graphvis/src/QueryForm.js",[],"/home/ilia/js/kosac/graphvis/src/SplitPane.js",[],["46","47"],"/home/ilia/js/kosac/graphvis/src/LoadDataAndGraph.js",["48","49"],"import React from 'react';\nimport { gql, useQuery} from \"@apollo/client\";\nimport Graph from \"./Graph\"\n\nLoadDataAndGraph.fragments = {\n  content: gql`\n  fragment contentFields on PostContentDynamicZone {\n    ... on ComponentPostCommentOnPost {\n      __typename\n      id\n    }\n    ... on ComponentPostReply {\n      __typename\n      replyTo {\n        id\n        username\n      }\n    }\n    ... on ComponentPostCommentOnActivity {\n      __typename\n      id\n    }\n    ... on ComponentPostProposal {\n      __typename\n      id\n    }\n    ... on ComponentPostArticle {\n      __typename\n      id\n    }\n    ... on ComponentPostSingleChoiceAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostMultipleChoiceAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostTextAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostScaleAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostShortAnswer {\n      __typename\n      id\n    }\n  }\n  `,\n  interaction: gql`\n  fragment interactionFields on Interaction {\n    id\n    type\n    actor {\n      id\n      username}\n  }\n  `,\n  activity: gql`\n  fragment activityFields on Activity {\n    id\n    name\n    interactions {\n      id\n      type\n      actor {\n        id\n        username\n      }\n    }\n  }\n  `,\n};\n\n// sample IDs for dev\nconst GROUP_ID = \"5fe17e24563de738c3a21661\";\nconst ACT_ID = \"5fe3e6f8563de738c3a21774\";\n\nconst getActivitiesQuery = gql`\n  query getActivities($groupId: ID!, $actId: ID!) {\n    activities (where: {group: $groupId, id: $actId}) {\n      name\n      posts {\n        id\n        writer {\n          id\n          username\n        }\n        content {\n          ... contentFields\n        }\n        childPosts {\n          id\n          writer {\n            id\n            username\n          }\n        }\n        interactions {\n          type\n          actor {username}\n          }\n      }\n    }\n  }\n  ${LoadDataAndGraph.fragments.content}\n  `;\n\nconst GET_POSTS_AND_INTERACTIONS = gql`\n  query getPosts($actId: ID!) {\n    posts(where: {activity: $actId}) {\n      id\n      type\n      writer {\n        id\n        username\n      }\n      parentPost {\n        id\n        writer {\n          id\n          username\n        }\n      }\n      interactions {\n        ... interactionFields\n      }\n    }\n  }\n  ${LoadDataAndGraph.fragments.interaction}\n`;  \n\n\nconst GET_ACTIVITY = gql`\n  query getActivity($actId: ID!) {\n    activity(id: $actId) {\n        ... activityFields\n        }\n      }\n      ${LoadDataAndGraph.fragments.activity}\n    `;\n\nconst GET_MEMBER_INTERACTIONS_ACTIVITY = gql`\n  query getMembIntActivity($actId: ID!) {\n    memberInteractions(where: {activity: $actId}) {\n      id\n      actor {username id}\n      receiver {username id}\n      type\n      quantity\n        }\n      }\n    `;\n// Testing display of query results\nexport default function LoadDataAndGraph() {\n\n  const { loading, error, data } = useQuery(GET_POSTS_AND_INTERACTIONS, {\n    variables: {\"actId\": ACT_ID},});\n\n  const { loading:loadingActivity, error:errorActivity, data:activity } = useQuery(GET_ACTIVITY,\n    {variables: {\"actId\": ACT_ID},});\n\n  const { loading:loadingMembInt, error:errorMembInt, data:membInt } = useQuery(GET_MEMBER_INTERACTIONS_ACTIVITY, {\n    variables: {\"actId\": ACT_ID},});\n\n  if (loading || loadingActivity || loadingMembInt) return <p>Loading posts, activity and member interactions data...</p>;\n  if (error || errorActivity || errorMembInt) return <p>Error : {error.message} </p>;\n  if (!data) return <p>No posts found</p>;\n\n  console.log('data ==>', data);\n  console.log('activity ==>', activity);\n  console.log('membInt ==>', membInt);\n\n\n  return (\n    <div>\n      <h3>Posts:</h3>\n      {data.posts.map((post) => (\n        <div>\n        Name: {post.writer.username} / Member ID: {post.writer.id} / Post ID: {post.id} / Parent: {!!post.parentPost && post.parentPost.writer.username}\n        </div>\n      )\n      )}\n      <h3>Interactions:</h3>\n      {data.posts.map((post) => (post.interactions.map(interaction => (\n        <div>\n          Actor: {interaction.actor.username} / Post writer: {post.writer.username} / Type : {interaction.type}\n        </div>\n      )\n      )\n      )\n      )}\n      <h3>Member interactions:</h3>\n      {membInt.memberInteractions.map((int) => (\n        <div>\n          Actor: {int.actor.username} / Target: {int.receiver.username} / Type: {int.type}\n        </div>\n      )\n      )\n      }\n      <Graph posts={data} activity={activity.activity} memberInteractions={membInt.memberInteractions}/>\n    </div>\n  );\n}",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},{"ruleId":"52","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":3,"column":13,"nodeType":"58","messageId":"59","endLine":3,"endColumn":22},{"ruleId":"56","severity":1,"message":"60","line":148,"column":9,"nodeType":"58","messageId":"59","endLine":148,"endColumn":21},{"ruleId":"61","severity":1,"message":"62","line":219,"column":6,"nodeType":"63","endLine":219,"endColumn":35,"suggestions":"64"},{"ruleId":"50","replacedBy":"65"},{"ruleId":"52","replacedBy":"66"},{"ruleId":"56","severity":1,"message":"67","line":79,"column":7,"nodeType":"58","messageId":"59","endLine":79,"endColumn":15},{"ruleId":"56","severity":1,"message":"68","line":82,"column":7,"nodeType":"58","messageId":"59","endLine":82,"endColumn":25},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],"no-unused-vars","'am4charts' is defined but never used.","Identifier","unusedVar","'test_members' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'props.memberInteractions'. Either include it or remove the dependency array.","ArrayExpression",["71"],["69"],["70"],"'GROUP_ID' is assigned a value but never used.","'getActivitiesQuery' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [props.posts, props.activity, props.memberInteractions]",{"range":"74","text":"75"},[7158,7187],"[props.posts, props.activity, props.memberInteractions]"]
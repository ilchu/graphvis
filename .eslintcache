[{"/home/ilia/js/kosac/graphvis/src/reportWebVitals.js":"1","/home/ilia/js/kosac/graphvis/src/App.js":"2","/home/ilia/js/kosac/graphvis/src/index.js":"3","/home/ilia/js/kosac/graphvis/src/client.js":"4","/home/ilia/js/kosac/graphvis/src/Graph.js":"5","/home/ilia/js/kosac/graphvis/src/QueryForm.js":"6","/home/ilia/js/kosac/graphvis/src/SplitPane.js":"7","/home/ilia/js/kosac/graphvis/src/LoadDataAndGraph.js":"8"},{"size":362,"mtime":1608775285262,"results":"9","hashOfConfig":"10"},{"size":526,"mtime":1609378417662,"results":"11","hashOfConfig":"10"},{"size":457,"mtime":1609218584112,"results":"12","hashOfConfig":"10"},{"size":907,"mtime":1609999259153,"results":"13","hashOfConfig":"10"},{"size":2122,"mtime":1610073949379,"results":"14","hashOfConfig":"10"},{"size":650,"mtime":1609223496643,"results":"15","hashOfConfig":"10"},{"size":273,"mtime":1609401672646,"results":"16","hashOfConfig":"10"},{"size":3892,"mtime":1610012680425,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1y87eqe",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/ilia/js/kosac/graphvis/src/reportWebVitals.js",[],["38","39"],"/home/ilia/js/kosac/graphvis/src/App.js",[],["40","41"],"/home/ilia/js/kosac/graphvis/src/index.js",[],"/home/ilia/js/kosac/graphvis/src/client.js",[],"/home/ilia/js/kosac/graphvis/src/Graph.js",["42"],"/home/ilia/js/kosac/graphvis/src/QueryForm.js",[],["43","44"],"/home/ilia/js/kosac/graphvis/src/SplitPane.js",[],"/home/ilia/js/kosac/graphvis/src/LoadDataAndGraph.js",["45","46"],"import React from 'react';\nimport { gql, useQuery, useApolloClient} from \"@apollo/client\";\nimport Graph from \"./Graph\"\n\nLoadDataAndGraph.fragments = {\n  content: gql`\n  fragment contentFields on PostContentDynamicZone {\n    ... on ComponentPostCommentOnPost {\n      __typename\n      id\n    }\n    ... on ComponentPostReply {\n      __typename\n      replyTo {\n        id\n        username\n      }\n    }\n    ... on ComponentPostCommentOnActivity {\n      __typename\n      id\n    }\n    ... on ComponentPostProposal {\n      __typename\n      id\n    }\n    ... on ComponentPostArticle {\n      __typename\n      id\n    }\n    ... on ComponentPostSingleChoiceAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostMultipleChoiceAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostTextAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostScaleAnswer {\n      __typename\n      id\n    }\n    ... on ComponentPostShortAnswer {\n      __typename\n      id\n    }\n  }\n  `,\n};\n\nconst getActivityQuery = gql`\n  query getActivity($groupId: ID!, $actId: ID!) {\n    activities (where: {group: $groupId, id: $actId}) {\n      name\n      posts {\n        id\n        writer {\n          id\n          username\n        }\n        content {\n          ... contentFields\n        }\n        childPosts {\n          id\n          writer {\n            id\n            username\n          }\n        }\n        interactions {type}\n      }\n    }\n  }\n  ${LoadDataAndGraph.fragments.content}\n  `;\n\nconst GROUP_ID = \"5fe17e24563de738c3a21661\";\nconst ACT_ID = \"5fe3e6f8563de738c3a21774\";\n\nconst getPostsQuery = gql`\n  query getPosts($actId: ID!) {\n    posts(where: {activity: $actId}) {\n      id\n      type\n      activity {\n        id\n        name\n        }\n      writer {\n        id\n        username\n      }\n      parentPost {\n        id\n        writer {\n          id\n          username\n        }\n      }\n      # childPosts {\n      #   id\n      #   type\n      #   writer {\n      #     id\n      #     username\n      #   }\n      # }\n      interactions {\n        id\n        type\n        actor {\n          id\n          username\n        }\n      }\n    }\n  }\n  `;\n\n\n// Testing display of query results\nexport default function LoadDataAndGraph() {\n\n  const client = useApolloClient();\n\n  const { loading, error, data } = useQuery(getPostsQuery,\n    {variables: {\"actId\": ACT_ID},});\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error : {error.message} </p>;\n  if (!data) return <p>No data</p>;\n\n\n  Object.keys(client.cache.data.data).forEach(key => {\n    key.match(/^Member/) && (client.cache.data.data[key].test = \"hey!\");\n    \n  }\n  );\n\n\n  console.log('cache ==>', client.cache.data.data);\n  console.log('data ==>', data);\n  // test.forEach((post) => {post.content = post.content[0]});\n  // let res = []\n  // for (let activity of test) {\n  //   res.push({});\n  //   for (let field of Object.keys(activity)) {\n  //     if (activity[field]) res[res.length-1][field] = activity[field];\n  //   }\n  // }\n\n//   for (let activity of test) {\n//     for (let field in activity) {\n//       if (activity[field] != null) {\n//         // console.log(activity[field]);\n//         res[activity.name][field] = activity[field];\n//     }\n//   }\n// }\n  // test.forEach((activity) => Object.keys(activity).forEach((i) => ((activity[i] != null) && delete(activity[i]))));\n  // test.forEach((activity) => {Object.keys(activity).forEach((field) => {console.log(field)}console.log(activity);});\n  // test.forEach(elem => {Object.keys(elem).forEach((key) => (elem[key] == null) && delete elem[key])});\n  // console.log('test ==>', test);\n  // console.log('res ==>', res);\n\n  return (\n    <div>\n    {data.posts.map((post) => (\n      <div>\n      Name: {post.writer.username} / Type: {post.type} / Parent: {!!post.parentPost && post.parentPost.writer.username}\n      </div>\n    )\n    )}\n    <Graph data={data}/>\n    </div>\n  );\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":69,"column":6,"nodeType":"55","endLine":69,"endColumn":8,"suggestions":"56"},{"ruleId":"47","replacedBy":"57"},{"ruleId":"49","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":55,"column":7,"nodeType":"61","messageId":"62","endLine":55,"endColumn":23},{"ruleId":"59","severity":1,"message":"63","line":82,"column":7,"nodeType":"61","messageId":"62","endLine":82,"endColumn":15},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.","ArrayExpression",["66"],["64"],["65"],"no-unused-vars","'getActivityQuery' is assigned a value but never used.","Identifier","unusedVar","'GROUP_ID' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [props.data]",{"range":"69","text":"70"},[2002,2004],"[props.data]"]